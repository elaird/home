#!/usr/bin/env python

from string import ascii_lowercase
from datetime import datetime
from optparse import OptionParser
import os

def opts() :
    parser = OptionParser("usage: %prog [options]")
    parser.add_option("--test",     dest = "test",     default = False, action = "store_true",   help = "test this program")
    parser.add_option("--dir",      dest = "dir",      default = ".",   metavar = "d",           help = "specify directory (default is \".\")")
    parser.add_option("--rename",   dest = "rename",   default = False, action = "store_true",   help = "print file names to rename directory d")
    parser.add_option("--execute",  dest = "execute",  default = False, action = "store_true",   help = "execute the renaming shown by --rename")
    parser.add_option("--decode",   dest = "decode",   default = False, action = "store_true",   help = "decode file names in directory d")
    parser.add_option("--git",      dest = "git",      default = False, action = "store_true",   help = "use \"git mv\" rather than \"mv -i\" when executing rename")
    parser.add_option("--strip",    dest = "strip",    default = False, action = "store_true",   help = "strip prefix when renaming")
    parser.add_option("--reformat", dest = "reformat", default = False, action = "store_true",   help = "rename (according to timestamp) directories which already have correctly formatted names")
    parser.add_option("--splitchar",dest = "splitchar",default = "_",   metavar= "c",            help = "use this character to define prefix (used by --strip)")

    options,args = parser.parse_args()
    if options.execute and not options.rename :
        print "To execute the renaming, use both of --rename --execute"
        exit()
    return options

def key(dct = {}, value = None) :
    n = dct.values().count(value)
    assert n==1,"dictionary contains %d(!=1) keys with value %s"%(n, str(value))
    for k,v in dct.iteritems() :
        if v==value : return k

def years(yearZero = 2000) :
    out = {}
    for i,y in enumerate(range(10)+list(ascii_lowercase)) :
        out[yearZero + i] = str(y)
    return out

def months() :
    out = {}
    for i in range(1, 13) :
        out[i] = hex(i).replace("0x","")
    return out

#encodes a date into ym; year and month are each one character
def encoded(date = datetime.now()) :
    yearList = years().keys()
    assert date.year in years(),"Only the years [%d-%d] are supported (%d requested)."%(min(yearList), max(yearList), date.year)
    return years()[date.year]+months()[date.month]

#decodes the above format
def decoded(s = "", dummyDay = 1) :
    ys = years()
    ms = months()
    if len(s)!=2 or (s[0] not in ys.values()) or (s[1] not in ms.values()) : return None
    return datetime(year = key(ys, s[0]), month = key(ms, s[1]), day = dummyDay)

def test(day = 1) :
    for year in range(2000, 2036) :
        for month in range(1, 13) :
            date = datetime(year, month, day)
            enc = encoded(date)
            dec = decoded(enc, day)
            #print enc,dec
            assert dec==date,"%s decodes to %s rather than %s"%(enc, dec, date)

#decode file names within a directory
def decodeNames(directory = "", splitchar = "_") :
    l = []
    for item in os.listdir(directory) :
        d = decoded(item.split(splitchar)[0])
        if d : l.append("(%4d-%02d) %s"%(d.year, d.month, item))

    for item in sorted(l) :
        print item

def rename(directory = "", descMap = lambda x:x, mv = "mv -i", execute = False, reformat = False, splitchar = "_") :
    for item in os.listdir(directory) :
        conds = [not os.path.isdir(item), item[0]=="."] #skip non-dirs and .dirs
        if not reformat : conds.append(decoded(item[:2]) and item[2]==splitchar) #skip correctly formatted dirs
        if any(conds) : continue

        enc = encoded(date = datetime.fromtimestamp(os.path.getmtime(item)))
        new = enc+descMap(item)
        if item==new : continue
        cmd = " ".join([mv, item, new])
        print cmd
        if execute : os.system(cmd)

if __name__ == "__main__":
    o = opts()
    c = o.splitchar
    if o.test :
        test()
    if o.decode :
        decodeNames(o.dir, o.splitchar)
    if o.rename :
        rename(directory = o.dir,
               mv = "git mv" if o.git else "mv -i",
               descMap = (lambda x:c.join([""]+x.split(c)[1:])) if o.strip else (lambda x:c+x),
               execute = o.execute,
               reformat = o.reformat,
               splitchar = o.splitchar,
               )
